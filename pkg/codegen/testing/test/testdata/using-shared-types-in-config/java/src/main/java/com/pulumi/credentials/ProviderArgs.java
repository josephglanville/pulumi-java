// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.credentials;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.credentials.enums.HashKind;
import com.pulumi.credentials.inputs.SharedArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The (entirely uncryptographic) hash function used to encode the &#34;password&#34;.
     * 
     */
    @Import(name="hash", required=true, json=true)
    private Output<HashKind> hash;

    /**
     * @return The (entirely uncryptographic) hash function used to encode the &#34;password&#34;.
     * 
     */
    public Output<HashKind> hash() {
        return this.hash;
    }

    /**
     * The password. It is very secret.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password. It is very secret.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="shared", required=true, json=true)
    private Output<SharedArgs> shared;

    public Output<SharedArgs> shared() {
        return this.shared;
    }

    /**
     * The username. Its important but not secret.
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return The username. Its important but not secret.
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.hash = $.hash;
        this.password = $.password;
        this.shared = $.shared;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hash The (entirely uncryptographic) hash function used to encode the &#34;password&#34;.
         * 
         * @return builder
         * 
         */
        public Builder hash(Output<HashKind> hash) {
            $.hash = hash;
            return this;
        }

        /**
         * @param hash The (entirely uncryptographic) hash function used to encode the &#34;password&#34;.
         * 
         * @return builder
         * 
         */
        public Builder hash(HashKind hash) {
            return hash(Output.of(hash));
        }

        /**
         * @param password The password. It is very secret.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password. It is very secret.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder shared(Output<SharedArgs> shared) {
            $.shared = shared;
            return this;
        }

        public Builder shared(SharedArgs shared) {
            return shared(Output.of(shared));
        }

        /**
         * @param user The username. Its important but not secret.
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The username. Its important but not secret.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ProviderArgs build() {
            if ($.hash == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "hash");
            }
            $.password = Codegen.stringProp("password").secret().arg($.password).env("FOO").def("").getNullable();
            if ($.shared == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "shared");
            }
            if ($.user == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "user");
            }
            return $;
        }
    }

}
