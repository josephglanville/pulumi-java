// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.myedgeorder.outputs;

import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.myedgeorder.outputs.Pav2MeterDetailsResponse;
import com.pulumi.myedgeorder.outputs.PurchaseMeterDetailsResponse;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class BillingMeterDetailsResponse {
    /**
     * @return Frequency of recurrence
     * 
     */
    private String frequency;
    /**
     * @return Represents MeterDetails
     * 
     */
    private Either<Pav2MeterDetailsResponse,PurchaseMeterDetailsResponse> meterDetails;
    /**
     * @return Represents Metering type (eg one-time or recurrent)
     * 
     */
    private String meteringType;
    /**
     * @return Represents Billing type name
     * 
     */
    private String name;

    private BillingMeterDetailsResponse() {}
    /**
     * @return Frequency of recurrence
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return Represents MeterDetails
     * 
     */
    public Either<Pav2MeterDetailsResponse,PurchaseMeterDetailsResponse> meterDetails() {
        return this.meterDetails;
    }
    /**
     * @return Represents Metering type (eg one-time or recurrent)
     * 
     */
    public String meteringType() {
        return this.meteringType;
    }
    /**
     * @return Represents Billing type name
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BillingMeterDetailsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String frequency;
        private Either<Pav2MeterDetailsResponse,PurchaseMeterDetailsResponse> meterDetails;
        private String meteringType;
        private String name;
        public Builder() {}
        public Builder(BillingMeterDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.frequency = defaults.frequency;
    	      this.meterDetails = defaults.meterDetails;
    	      this.meteringType = defaults.meteringType;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder frequency(String frequency) {
            if (frequency == null) {
                throw new MissingRequiredPropertyException("BillingMeterDetailsResponse", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder meterDetails(Either<Pav2MeterDetailsResponse,PurchaseMeterDetailsResponse> meterDetails) {
            if (meterDetails == null) {
                throw new MissingRequiredPropertyException("BillingMeterDetailsResponse", "meterDetails");
            }
            this.meterDetails = meterDetails;
            return this;
        }
        @CustomType.Setter
        public Builder meteringType(String meteringType) {
            if (meteringType == null) {
                throw new MissingRequiredPropertyException("BillingMeterDetailsResponse", "meteringType");
            }
            this.meteringType = meteringType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
                throw new MissingRequiredPropertyException("BillingMeterDetailsResponse", "name");
            }
            this.name = name;
            return this;
        }
        public BillingMeterDetailsResponse build() {
            final var o = new BillingMeterDetailsResponse();
            o.frequency = frequency;
            o.meterDetails = meterDetails;
            o.meteringType = meteringType;
            o.name = name;
            return o;
        }
    }
}
